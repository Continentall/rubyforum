Напоминание о предназначении дирикторий:
app - основная директория содержащая web-приложение

app/controllers - директория для классов ruby (они же контроллеры)

app/models - директория с классами для взаимодействия с БД

app/views - директория с файлами выдаваемыми пользователю

bin - директория с файлами для запуска сервера

config - директория содержащая глобальную конфигурацию проекта

db - директория хранения БД

lib - в этой директории можно хранить свои скрипты

log - директория с журналами событий

public - директория с файлами выдаваемыми пользователю напрямую

tmp - временные файлы

vendor - пустая директория, ныне не используется почти ни кем

Все библиотеки для фронтенда мы прописываем через package.json
Для бэк-энда через Gemfile
--------------------------------------------------------------
yarn upgrade-interactive - обновление компонентов поставленных через yarn
bundle u - обновление компонентов поставленных через bundle
bundle outdated - проверка есть ли у нас библиотеки которые можно обновить 
--------------------------------------------------------------
Просмотр всех путей в приложении -  /rails/info/routes
--------------------------------------------------------------
Переменные экземпляра:

Переменные экземпляра совместно используются всеми методами для одного и того же объекта.
Имя переменной экземпляра должно начинаться с символа «@», в противном случае имена переменных экземпляра следуют правилам как имя локальной переменной (обсуждалось ранее).

Синтаксис: @username = "Гриша"
--------------------------------------------------------------
SQLite3 краткий экскурс в миграции 
rails db:create RAILS_ENV=development    - создание базы данных
rails g model Topic title:string body:text - создание модели (класса и миграции) с двумя полями title и body
rails db:migrate   - применение миграции

rails db:rollback - отмена всех миграций и удаление таблицы
rails db:rollback STEP=1  - откат на 1 миграцию назад
Модель - некоторый класс позволяющий взаимодействовать с таблицей БД (находятся модели в app/models)
ActiveRecord - крутой класс, который позволяет работать с данными в БД точно так же как с классами в Ruby (по этому не надо писать SQL запросы руками, а можно работать с данными через код Ruby) 
--------------------------------------------------------------
Взаимодействие с БД через Rails console
rails c - открытие консоли Rails
t = Topic.new title: 'text', body: 'text'  - попытка создания новой записи в таблице Topic
t.valid? - проверка записи на валидность
t.save - сохранение записи в табличку
Topic.all - просмотр всех записей таблички Topic
Topic.find_by title:'text' - поиск одной записи по заголовку text
Topic.where title:'text' - поиск всех записи по заголовку text
--------------------------------------------------------------
Rails по-умомолчанию для каждого метода контроллера найдет в папке views папку с названием контроллера и выведет на экран файл с названием этого метода. С ума сойти можно!
Важно соблюдать правила названия классов в файле контроллера, иначе класс найден не будет. Имя файла пишем с большой буквы + Controller
xxxxController - название класса | < - знак наследования свойст от предка. Для всех контроллеров наследовать надо от их предка - ApplicationController
:x  - двоеточие перед чем-либо указывает, что это - переменная, 

flash[:sucess] = "ВСЕ ОТЛИЧНО!"

посмотреть все коды состояний можно тут http://www.railsstatuscodes.com/
--------------------------------------------------------------
Один ко многим (свяхь полей в БД)
rails g model Message body:text topic:belongs_to - Так я генерировал таблицу сообщений
belongs_to  -  принадлежит || То есть мы говорим что Message принадлежит Topic
--------------------------------------------------------------
helpers - вспомогательные функции для нашего проекта хранятся там
главный helper проекта - application_helper.rb 
Если вы хотите добавить новый хелпер который будет использоваться регулярно,
можно поместить его в application_helper.rb 
---------------------------------------------------------------
Файлик seeds.rb нужен для заполнения приложения тестовыми демо-данными
rails db:seed - команда для заполнения БД этими тест данными
Я тут все через Faker заполнял, это документация к нему
https://github.com/faker-ruby/faker#default
---------------------------------------------------------------
Для разбиения страниц будет использоваться pagy https://github.com/ddnexus/pagy
1. Ему нужно для начала создать файлик инициализации (config->initializers->pagy.rb)
2. Вставляем туда код стартового конфиг файла https://github.com/ddnexus/pagy/blob/master/lib/config/pagy.rb
3. В файл инициализации добавим строку " require 'pagy/extras/bootstrap' ", что бы применить бутстрап стили на переключатели страниц
4. Добавим гем 'pagy' --> bundle i
5. В application_controller подключаем компонент pagy " include Pagy::Backend "
6. В application_helper подключаем компонент pagy " include Pagy::Frontend "
7. Пример применения разбиения по страницам в контроллере " @pagy, @blocks = pagy Block  " 
8. Можно выводить сразу отсортированные данные " @pagy, @blocks = pagy Block.order(created_at: :desc) "
9. Отображение переключалки страниц <%== pagy_bootstrap_nav @pagy %>
---------------------------------------------------------------
                Шифрование пароля (gem bcrypt) 
has_secure_password(attribute = :password, validations: true) 
Добавляет методы для установки и аутентификации по паролю BCrypt. 
Этот механизм требует, чтобы у вас был атрибут XXX_digest в БД. Где XXX — имя атрибута желаемого пароля.
1. Так будет выглядеть миграция   rails g model User email:string name:string password_digest:string
password_digest - строковое поле которое будет содержать хэш пароля, через который bcrypt будет брать реальный пароль
has_secure_password добавит нам новые виртуальные поля password и password_confirmation
Виртуальные поля можно вызывать как аттрибуты класса, но в БД они не записываются
2. has_secure_password добавяем сразу в user.rb к остальным валидациям
3. Ставим гем bcrypt
----------------------------------------------------------------
Если вы желаете применить новые валидации на уровне БД а все миграции уже были пременены
Можно просто сшенерировать новую миграцию
    rails g migration add_missing_null_cheks
migration add_missing_null_cheks - просто название для файла миграции
----------------------------------------------------------------
            Декораторы (gem 'draper')
Позволяют добавлять к обьектам дополнительные методы (связанные с их отображением)
https://github.com/drapergem/draper  - документация
Для создания нового главного декоратора (ApplicationDecorator) используйте команду " rails generate draper:install "
Для создания нового обычного декоратора используется команда " rails generate decorator Name "
//Тут ситуация как с контроллером есть главный контроллер ApplicationController, а есть вторичные user_controller\\
После этого ваши декораторы будут распологаться в app/decorators
Важно понимать, что не все декораторы доступны для всего
user_decorator при вызове .decorate работает только с данными пользователя(user)
.decorate передаст методы из декоратора соответствующий объект, который ми декорируем. (НО ОНИ НЕ ВЫЗЫВАЮТСЯ АВТОМАТИЧЕСКИ) их надо вызывать вручную
------------------------------------------------------------------
Для правильной работы выпадащего меню необходимо поставить popperjs
    yarn add @popperjs/core
Затем переходим в деректорию javascript -> path -> application.js
И добавляем туда следующие строки:
        import '@popperjs/core'
        import 'bootstrap/js/dist/dropdown'
------------------------------------------------------------------
Для того что бы запоминать пользователя при входе надо добавить в табличку очередное новое поле
Поле будет содержать хэш токена для запоминания пользователя
    rails g migration add_remember_token_digest_to_users remember_token_digest:string
    rails db:migrate
(remember_token_digest) тоже digest, он будет шифрован как и пароль ведь этот токен очень важен
Затем в user.rb надо написать некоторую функцию для генерации токена и отправки его в табличку захэшированным
------------------------------------------------------------------
                                rubocop
gem 'rubocop', '~> 1.36', require: false   
gem 'rubocop-rails','~> 2.16', require: false
gem 'rubocop-performance','~> 1.15', require: false
(ДОБАВЛЯТЬ В development среду)

Потом надо создать конфигурационный файл для rubocop (.rubocop.yml) находится должен в корневой папке
Содержимое файла должно быть таким
**********************************************
require:
  - rubocop-performance
  - rubocop-rails


AllCops:
  NewCops: enable
  TargetRubyVersion: 3.1.2

Style/Documentation:
    Enabled: false
**********************************************
Затем выполняем команду что бы запустить проверку (без автоисправления):  "bundle exec rubocop"
"bundle exec rubocop -A"  - режим проверки с агрессивной автокорекцией проблем
"bundle exec rubocop -a"  - режим проверки с автокорекцией проблем

Если есть необходимость отключить проверку rubocop в каких-то строчках можно использовать:
 # rubocop:disable имя проверки
    код где мы не хотим видеть какую-то ошибку
 # rubocop:enable имя проверки
 -------------------------------------------------------------
            Форматы что-это и с чем едят
Часто просматривая наши маршруты до этого можно было задаться вопросом
Что это за странная скобочка (.:format)
_____"/admin/users(.:format)"
По сути это значит, что запросить данные с этого маршрута можно в разных форматах
Если в пути вы не укажете формат то получите стандартную web-страницу html
Но если указать формат все может измениться admin_users_path(format: :zip)
так-как мы хотим работать с zip архивом надо поставить гем который позволит работать с архивом
      gem "rubyzip", "~> 2.3.2"
Так как мы хотим создавать xlsx-документы нам нужен гем который умеет их создавать
gem 'caxlsx', '~>3.2.0'   ---- основной гем
gem 'caxlsx_rails', '~>0.6.3'   ----   гем-дополнение для правильного отображения представлений
ФУНКЦИЯ ДЛЯ ДОБАВЛЕНИЯ В АРХИВ ФАЙЛОВ xlsx ДЛЯ КАЖДОГО ПОЛЬЗОВАТЕЛЯ
***********************
def respond_with_zipperd_users
        compressed_filestream = Zip::OutputStream.write_buffer do |zos| #Генереруем временный архив compressed_filestream
            User.order(created_at: :desc).each do |user| # цикл который для каждого пользователя в БД будет выполнять код ниже
                zos.put_next_entry "user_#{user.id}.xlsx" # put_next_entry - команда из gem rubyzip она добаляет файл в архив
                zos.print render_to_string( #render_to_string ренерит представление не на экран а в память (в виде строки)
                    lauout: false, handlers: [:axlsx], formats: [:xlsx], template: 'admin/users/user', locals: {user: user})
                    #lauout: false - указывает на рендеринг без lauout | handlers - указывает на выбор обработчика шаблона |
                    #formats - формат текста | template - представление которое мы будем рендерить в строку (тут xlsx файлик)|
                    #локальная переменная передаваемая | 
            end
        end
        compressed_filestream.rewind # возвращаем итератор записи\чтения файла в начало
        send_data compressed_filestream.read, filename: 'users.zip' # send_data встроенный ruby метод, что даст скачать файл
    end
***********************
СОДЕРЖИМОЕ ФАЙЛА КОТОРЫЙ РЕНЕДРИМ
***********************
wb = xlsx_package.workbook
s = wb.styles

highlight_cell = s.add_style(bg_color: "EFC376")

right_cell = s.add_style(border: Axlsx::STYLE_THIN_BORDER, alignment: {horizontal: :right})

date_cell = s.add_style(format_code: "yyyy-mm-dd")

wb.add_worksheet(name: "User") do |sheet|
    sheet.add_row ["ID", user.id], style: [nil, highlight_cell]
    sheet.add_row ["Name", user.name], style: [nil, right_cell]
    sheet.add_row ["Email", user.email], style: [nil, right_cell]
    sheet.add_row ["Created at", user.created_at], style: [nil, date_cell]
    sheet.add_row ["Updated at", user.updated_at], style: [nil, date_cell]
end
***********************
--------------------------------------------------------------------
app/services нужен для создания сервисных классов
Сервисные классы - это объекты предназначенные для выполнения одного действия.
Обычно сервисным объектом становится тот объект, который не вписывается в модель или представление
application_service.rb  - главный сервис приложения
******************
class ApplicationService 
    def self.call(*args, &block) #Создание классовго метода call
        new(*args, &block).call # Он инстанцирует указанный класс и вызывает действие которое он должен делать
    end
end
******************
-------------------------------------------------------
                attr_reader 
Самое простое обьяснение этого метода:
        attr_reader :archive
По сути равно такому методу

def get_archive 
		return @archive 
end
-------------------------------------------------------
Так как caxlsx не умеет читать excel файлы, а нам это необходимо
Придется ипользовать rubyXL # https://github.com/weshatheleopard/rubyXL
gem "rubyXL", "~>3.4"
--------------------------------------------------------
Для отправки в БД кучи записей одним запросом используется gem
gem 'activerecord-import', '~>1.4'

User.import array_of_users, ignore: true   - За один запрос отправт в БД массив пользователей
ignore: true - значит игнорировать повторяюзиеся записи
Причём все валидации будут выполненны 
Метод импорта может принимать массив имен столбцов (строка или символы) и массив массивов. 
Каждый дочерний массив представляет отдельную запись и ее список значений в том же порядке, 
что и столбцы. Это самый быстрый механизм импорта, а также самый примитивный
--------------------------------------------------------
        Интернационализация приложения
1. Перво-наперво добавим в application.rb строки
config.i18n.availible_locales = %i[en ru]  #тут мы указываем какие языки будем поддерживать
config.i18n.default_locale = :en
# i18n - инернализация (сокращение такое)
2.Нужно установить новенький gem (gem 'rails-i18n','~>7.0.5')
Этот гем нужен для подгрузки самых популярных переводов слов на кучу языков
Там содержатся переводы дней, месяцев, ошибок, валют 
3. Теперь в папке confic/locales появился файлик en.yml - тут будет храниться весь наш текст
        Пример файл en.yml:
        en:
            menu:
                home: "Home"
                
        Пример файл ru.yml:
        ru:
            menu:
                home: "Главная"
        Выводов коде:
        t('menu.home')

*Ленивые переводы: Если вы правильно назвали переменную - то её название можно сократить
pages:
    index:
        title: "Пупа"
Можно вызвать в файле pages/index.html.erb не так t(pages.index.title) а просто t(.title)
Ruby сам подставит назавние дерикторий
***
Локализация даты и времени происходит тут не через strftime а так
***********************
def formatted_created_at
     l created_at, format: :long
end
***********************
Перевод названий полей в БД для правильного отображения ошибок и label'ов
  activerecord:
    attributes:
      topic:
        title: "Title"
        body: "Body"
Перевод названия моделей (может быть полезен при работе с некоторыми хелперами)
  activerecord:
    models:
      topic: "Тема"

4. Оборачиваем все наши маршруты в такую конструкцию
scope "(:locale)", locale: /#{I18n.available_locales.join("|")}/ do 
end
    Это делает доступными маршруты аля localhost/:locale/topic например

5. Добавим в application_controller основную логику 
**********************
  around_action :switch_locale # оборачивает всякое действие данной функцией

  private

  def switch_locale(&action) # &action - любое действие которое этому контроллеру надо выполнить
    locale = locale_from_url || I18n.default_locale #locale берется из url как параметр или по-умолчанию
    I18n.with_locale locale, &action #действие контроллера будет выполнятся в контексте запрошенной локали
  end
  
  def locale_from_url
    locale = params[:locale]

    return locale if I18n.available_locales.map(&:to_s).include?(locale) #Возврат локали если введеная локаль в списке всех поддерживаемых локалей имеется

  end

  def default_url_options #Переопределение встроенного метода Ruby, в котором сказанно к каждому url пристыковываем локаль
    {locale:I18n.locale}
  end
**********************
----------------------------------------------------------------------
        Привязка пользователя к сообщениям и темам
  rails g migration add_user_id_to_messages user:belongs_to
belongs_to  -  принадлежит || То есть мы говорим что Message принадлежит User
Соответственно в Message появится поле user_id, для привязки
Повторим данное действие для topic:
  rails g migration add_user_id_to_topics user:belongs_to
## Кстати не возник вопрос почему привязка идет туда куда надо?
## Все благодаря правильному наименованию миграций
##  add_user_id_to_MESSAGES - значит добавляем к Message

Так-с это создало привязку на уровне БД, но не создало ее на уровне модели

Поэтому добавим в модель пользователя данные строки 
user.rb
***************
has_many :topics, dependent: :destroy
has_many :messages, dependent: :destroy
***************

В модели тем и сообщений добавим это: belongs_to :user
----------------------------------------------------------------------
@topic = Topic.new topic_params - создание нового топика без привязки к пользователю
@topic = current_user.topics.build topic_params
# build - Возвращает новый объект типа коллекции, который был создан с атрибутами и связан с этим объектом, но еще не сохранен.

НО ВОТ НЕЗАДАЧА 
@message = @topic.messages.build message_params
в create у message eже есть привязка

поэтому связывать мы будем через параметры 
def message_params
  params.require(:message).permit(:body).merge(user_id: current_user.id)
  # merge - добавит в параметры user_id с значением id пользователя
end
