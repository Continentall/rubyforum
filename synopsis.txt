Напоминание о предназначении дирикторий:
app - основная директория содержащая web-приложение

app/controllers - директория для классов ruby (они же контроллеры)

app/models - директория с классами для взаимодействия с БД

app/views - директория с файлами выдаваемыми пользователю

bin - директория с файлами для запуска сервера

config - директория содержащая глобальную конфигурацию проекта

db - директория хранения БД

lib - в этой директории можно хранить свои скрипты

log - директория с журналами событий

public - директория с файлами выдаваемыми пользователю напрямую

tmp - временные файлы

vendor - пустая директория, ныне не используется почти ни кем
--------------------------------------------------------------
yarn upgrade-interactive - обновление компонентов поставленных через yarn
bundle u - обновление компонентов поставленных через bundle
bundle outdated - проверка есть ли у нас библиотеки которые можно обновить 
--------------------------------------------------------------
Просмотр всех путей в приложении -  /rails/info/routes
--------------------------------------------------------------
Переменные экземпляра:

Переменные экземпляра совместно используются всеми методами для одного и того же объекта.
Имя переменной экземпляра должно начинаться с символа «@», в противном случае имена переменных экземпляра следуют правилам как имя локальной переменной (обсуждалось ранее).

Синтаксис: @username = "Гриша"
--------------------------------------------------------------
SQLite3 краткий экскурс в миграции 
rails db:create RAILS_ENV=development    - создание базы данных
rails g model Topic title:string body:text - создание модели (класса и миграции) с двумя полями title и body
rails db:migrate   - применение миграции

rails db:rollback - отмена всех миграций и удаление таблицы
rails db:rollback STEP=1  - откат на 1 миграцию назад
Модель - некоторый класс позволяющий взаимодействовать с таблицей БД (находятся модели в app/models)
ActiveRecord - крутой класс, который позволяет работать с данными в БД точно так же как с классами в Ruby (по этому не надо писать SQL запросы руками, а можно работать с данными через код Ruby) 
--------------------------------------------------------------
Взаимодействие с БД через Rails console
rails c - открытие консоли Rails
t = Topic.new title: 'text', body: 'text'  - попытка создания новой записи в таблице Topic
t.valid? - проверка записи на валидность
t.save - сохранение записи в табличку
Topic.all - просмотр всех записей таблички Topic
Topic.find_by title:'text' - поиск одной записи по заголовку text
Topic.where title:'text' - поиск всех записи по заголовку text
--------------------------------------------------------------
Rails по-умомолчанию для каждого метода контроллера найдет в папке views папку с названием контроллера и выведет на экран файл с названием этого метода. С ума сойти можно!
Важно соблюдать правила названия классов в файле контроллера, иначе класс найден не будет. Имя файла пишем с большой буквы + Controller
xxxxController - название класса | < - знак наследования свойст от предка. Для всех контроллеров наследовать надо от их предка - ApplicationController
:x  - двоеточие перед чем-либо указывает, что это - переменная, 

flash[:sucess] = "ВСЕ ОТЛИЧНО!"

посмотреть все коды состояний можно тут http://www.railsstatuscodes.com/
--------------------------------------------------------------
Один ко многим (свяхь полей в БД)
rails g model Message body:text topic:belongs_to - Так я генерировал таблицу сообщений
belongs_to  -  принадлежит || То есть мы говорим что Message принадлежит Topic
--------------------------------------------------------------
helpers - вспомогательные функции для нашего проекта хранятся там
главный helper проекта - application_helper.rb 
Если вы хотите добавить новый хелпер который будет использоваться регулярно,
можно поместить его в application_helper.rb 
---------------------------------------------------------------
Файлик seeds.rb нужен для заполнения приложения тестовыми демо-данными
rails db:seed - команда для заполнения БД этими тест данными
Я тут все через Faker заполнял, это документация к нему
https://github.com/faker-ruby/faker#default
---------------------------------------------------------------
Для разбиения страниц будет использоваться pagy https://github.com/ddnexus/pagy
1. Ему нужно для начала создать файлик инициализации (config->initializers->pagy.rb)